/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
/* tslint:disable:component-selector-name  component-selector-type */
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, EventEmitter, HostBinding, Input, Output, TemplateRef } from '@angular/core';
import { cloneDate } from '@progress/kendo-date-math';
import { BusViewService } from './services/bus-view.service';
import { WeekNamesService } from './services/weeknames.service';
import { IntlService } from '@progress/kendo-angular-intl';
import { CalendarViewEnum } from './models/view.enum';
import { MIN_DATE, MAX_DATE } from '../defaults';
import { dateInRange, hasChange } from '../util';
var DEFAULT_VIEWS_LENGTH = 2;
/**
 * @hidden
 */
var HorizontalViewListComponent = /** @class */ (function () {
    function HorizontalViewListComponent(bus, intl, weekService, cdr) {
        this.bus = bus;
        this.intl = intl;
        this.weekService = weekService;
        this.cdr = cdr;
        this.activeView = CalendarViewEnum.month;
        this.isActive = true;
        this.min = new Date(MIN_DATE);
        this.max = new Date(MAX_DATE);
        this.views = DEFAULT_VIEWS_LENGTH;
        this.showViewHeader = false;
        this.valueChange = new EventEmitter();
        this.cellEnter = new EventEmitter();
        this.cellLeave = new EventEmitter();
        this.activeDateChange = new EventEmitter();
        this.weekNames = [];
        this.dates = [];
        this.intlSubscription = this.intl.changes.subscribe(this.intlChange.bind(this));
    }
    Object.defineProperty(HorizontalViewListComponent.prototype, "weekNumber", {
        get: function () {
            return this.showWeekNumbers && this.isMonthView();
        },
        set: function (showWeekNumbers) {
            this.showWeekNumbers = showWeekNumbers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HorizontalViewListComponent.prototype, "getComponentClass", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HorizontalViewListComponent.prototype, "getComponentMonthClass", {
        get: function () {
            return this.activeView === CalendarViewEnum.month;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HorizontalViewListComponent.prototype, "getComponentYearClass", {
        get: function () {
            return this.activeView === CalendarViewEnum.year;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HorizontalViewListComponent.prototype, "getComponentDecadeClass", {
        get: function () {
            return this.activeView === CalendarViewEnum.decade;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HorizontalViewListComponent.prototype, "getComponentCenturyClass", {
        get: function () {
            return this.activeView === CalendarViewEnum.century;
        },
        enumerable: true,
        configurable: true
    });
    HorizontalViewListComponent.prototype.ngOnChanges = function (changes) {
        this.initService();
        if (this.weekNames.length === 0 || changes.weekNumber) {
            this.weekNames = this.weekService.getWeekNames(this.weekNumber);
        }
        if (!this.service) {
            return;
        }
        this.views = this.views || DEFAULT_VIEWS_LENGTH;
        var focusedDate = this.focusedDate;
        var viewDate = this.clampDate(this.service.viewDate(focusedDate, this.max, this.views));
        this.skip = this.service.skip(viewDate, this.min);
        this.total = this.service.total(this.min, this.max);
        var activeViewChanged = hasChange(changes, 'activeView');
        var viewsHasChanged = this.views > 0 && hasChange(changes, 'views');
        if (activeViewChanged || !this.isInDates(focusedDate) || viewsHasChanged || !this.activeDate) {
            this.dates = this.service.datesList(viewDate, this.getTake(this.skip));
            this.activeDate = cloneDate(this.dates[0]);
            this.activeDateChange.emit(this.activeDate);
        }
    };
    HorizontalViewListComponent.prototype.ngOnDestroy = function () {
        this.intlSubscription.unsubscribe();
    };
    HorizontalViewListComponent.prototype.initService = function () {
        this.service = this.bus.service(this.activeView);
    };
    HorizontalViewListComponent.prototype.handleDateChange = function (candidate) {
        this.valueChange.emit(candidate);
    };
    HorizontalViewListComponent.prototype.isMonthView = function () {
        return this.activeView === CalendarViewEnum.month;
    };
    HorizontalViewListComponent.prototype.getCaptionTitle = function (date) {
        return this.service.title(date);
    };
    HorizontalViewListComponent.prototype.getCaptionClass = function () {
        return this.isMonthView() ? 'k-month-header' : 'k-meta-header';
    };
    HorizontalViewListComponent.prototype.navigate = function (action) {
        var candidate = this.move(action);
        var list = this.service.datesList(candidate, this.getTake(this.skip));
        if (this.isListInRange(list)) {
            this.dates = list;
        }
        this.activeDate = cloneDate(this.dates[0]);
        this.focusedDate = cloneDate(candidate);
        this.cdr.markForCheck();
        this.activeDateChange.emit(this.activeDate);
        return cloneDate(candidate);
    };
    HorizontalViewListComponent.prototype.canNavigate = function (action) {
        if (!this.service) {
            return false;
        }
        return this.isListInRange(this.service.datesList(this.move(action), this.getTake(this.skip)));
    };
    HorizontalViewListComponent.prototype.intlChange = function () {
        this.weekNames = this.weekService.getWeekNames(this.weekNumber);
        this.cdr.markForCheck();
    };
    HorizontalViewListComponent.prototype.clampDate = function (value) {
        return dateInRange(value, this.min, this.max);
    };
    HorizontalViewListComponent.prototype.move = function (action) {
        return this.service.move(this.dates[0] || this.focusedDate, action);
    };
    HorizontalViewListComponent.prototype.isListInRange = function (list) {
        var lowerBound = this.service.beginningOfPeriod(this.min);
        var upperBound = this.service.beginningOfPeriod(this.service.addToDate(this.max, 1));
        return lowerBound <= list[0] && list[list.length - 1] < upperBound;
    };
    HorizontalViewListComponent.prototype.isInDates = function (value) {
        return this.service.isInArray(value, this.dates);
    };
    HorizontalViewListComponent.prototype.getTake = function (skip) {
        return Math.min(this.total - skip, this.views);
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", TemplateRef)
    ], HorizontalViewListComponent.prototype, "cellTemplateRef", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", TemplateRef)
    ], HorizontalViewListComponent.prototype, "weekNumberTemplateRef", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], HorizontalViewListComponent.prototype, "activeRangeEnd", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], HorizontalViewListComponent.prototype, "activeView", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], HorizontalViewListComponent.prototype, "cellUID", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Date)
    ], HorizontalViewListComponent.prototype, "focusedDate", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], HorizontalViewListComponent.prototype, "isActive", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Date)
    ], HorizontalViewListComponent.prototype, "min", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Date)
    ], HorizontalViewListComponent.prototype, "max", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], HorizontalViewListComponent.prototype, "selectionRange", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Date)
    ], HorizontalViewListComponent.prototype, "value", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], HorizontalViewListComponent.prototype, "views", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], HorizontalViewListComponent.prototype, "showViewHeader", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], HorizontalViewListComponent.prototype, "weekNumber", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], HorizontalViewListComponent.prototype, "valueChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], HorizontalViewListComponent.prototype, "cellEnter", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], HorizontalViewListComponent.prototype, "cellLeave", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], HorizontalViewListComponent.prototype, "activeDateChange", void 0);
    tslib_1.__decorate([
        HostBinding("class.k-calendar-view"),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], HorizontalViewListComponent.prototype, "getComponentClass", null);
    tslib_1.__decorate([
        HostBinding("class.k-calendar-monthview"),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], HorizontalViewListComponent.prototype, "getComponentMonthClass", null);
    tslib_1.__decorate([
        HostBinding("class.k-calendar-yearview"),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], HorizontalViewListComponent.prototype, "getComponentYearClass", null);
    tslib_1.__decorate([
        HostBinding("class.k-calendar-decadeview"),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], HorizontalViewListComponent.prototype, "getComponentDecadeClass", null);
    tslib_1.__decorate([
        HostBinding("class.k-calendar-centuryview"),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], HorizontalViewListComponent.prototype, "getComponentCenturyClass", null);
    HorizontalViewListComponent = tslib_1.__decorate([
        Component({
            changeDetection: ChangeDetectionStrategy.OnPush,
            selector: 'kendo-calendar-horizontal',
            template: "\n    <table\n        class=\"k-content k-calendar-content k-calendar-table\"\n        *kFor=\"let date of dates\"\n    >\n        <caption *ngIf=\"showViewHeader\" [ngClass]=\"getCaptionClass()\">{{ getCaptionTitle(date) }}</caption>\n        <thead *ngIf=\"isMonthView()\" class=\"k-calendar-thead\">\n            <tr class=\"k-calendar-tr\" role=\"row\">\n                <th *ngFor=\"let name of weekNames\" class=\"k-calendar-th\">{{name}}</th>\n            </tr>\n        </thead>\n        <tbody class=\"k-calendar-tbody\"\n            kendoCalendarView\n            role=\"rowgroup\"\n            direction=\"horizontal\"\n            [activeView]=\"activeView\"\n            [isActive]=\"isActive\"\n            [min]=\"min\" [max]=\"max\"\n            [cellUID]=\"cellUID\"\n            [focusedDate]=\"focusedDate\"\n            [selectedDate]=\"value\"\n            [selectionRange]=\"selectionRange\"\n            [activeRangeEnd]=\"activeRangeEnd\"\n            [weekNumber]=\"weekNumber\"\n            [templateRef]=\"cellTemplateRef\"\n            [weekNumberTemplateRef]=\"weekNumberTemplateRef\"\n            [viewDate]=\"date\"\n            (change)=\"handleDateChange($event)\"\n            (cellEnter)=\"cellEnter.emit($event)\"\n            (cellLeave)=\"cellLeave.emit($event)\"\n        ></tbody>\n    </table>\n  "
        }),
        tslib_1.__metadata("design:paramtypes", [BusViewService,
            IntlService,
            WeekNamesService,
            ChangeDetectorRef])
    ], HorizontalViewListComponent);
    return HorizontalViewListComponent;
}());
export { HorizontalViewListComponent };
