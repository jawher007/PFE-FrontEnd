/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Directive, Input } from '@angular/core';
import { isChanged } from '@progress/kendo-angular-common';
import { getter } from '@progress/kendo-common';
import { of } from 'rxjs';
import { compose } from './funcs';
import { DataBoundComponent } from './data-bound-component';
import { isBlank, isNullOrEmptyString, isPresent, isArrayWithAtLeastOneItem, filterTree } from './utils';
import { FlatEditingService } from "./drag-and-drop/editing-services/flat-editing.service";
import { defaultTreeviewFilterSettings } from './treeview-filter-settings';
var findChildren = function (prop, nodes, value) { return nodes.filter(function (x) { return prop(x) === value; }); };
var ɵ0 = findChildren;
var mapToTree = function (currentLevelNodes, allNodes, parentIdField, idField) {
    if (!isArrayWithAtLeastOneItem(currentLevelNodes)) {
        return [];
    }
    return currentLevelNodes.map(function (node) { return ({
        dataItem: node,
        children: mapToTree(findChildren(getter(parentIdField), allNodes || [], getter(idField)(node)), allNodes, parentIdField, idField)
    }); });
};
var ɵ1 = mapToTree;
/**
 * A directive which encapsulates the retrieval of the child nodes.
 */
var FlatDataBindingDirective = /** @class */ (function () {
    function FlatDataBindingDirective(treeView) {
        var _this = this;
        this.treeView = treeView;
        /**
         * @hidden
         */
        this.originalData = [];
        this.visibleNodes = new Set();
        this._filterSettings = defaultTreeviewFilterSettings;
        this.treeView.isVisible = function (node) { return _this.visibleNodes.has(node); };
    }
    Object.defineProperty(FlatDataBindingDirective.prototype, "nodes", {
        /**
         * The nodes which will be displayed by the TreeView.
         */
        set: function (values) {
            this.originalData = values || [];
            if (!isNullOrEmptyString(this.parentIdField)) {
                var prop = getter(this.parentIdField);
                this.treeView.nodes = this.originalData.filter(compose(isBlank, prop));
                this.filterData = mapToTree(this.treeView.nodes, this.originalData, this.parentIdField, this.idField);
                this.visibleNodes.clear();
                this.updateNodesVisibility(this.filterData);
            }
            else {
                this.treeView.nodes = this.originalData.slice(0);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatDataBindingDirective.prototype, "isVisible", {
        /**
         * @hidden
         * A callback which determines whether a TreeView node should be rendered as hidden.
         */
        set: function (fn) {
            this.treeView.isVisible = fn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatDataBindingDirective.prototype, "filter", {
        /**
         * Applies a filter and changes the visibility of the component's nodes accordingly.
         * To customize the built-in filtering, use the [filterSettings]({% slug api_treeview_flatdatabindingdirective %}#toc-filtersettings) prop.
         */
        set: function (term) {
            this.handleFilterChange(term);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatDataBindingDirective.prototype, "filterSettings", {
        get: function () {
            return this._filterSettings;
        },
        /**
         * The settings which are applied when performing a filter on the component's data.
         */
        set: function (value) {
            this._filterSettings = tslib_1.__assign({}, defaultTreeviewFilterSettings, value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    FlatDataBindingDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (isPresent(this.parentIdField) && isPresent(this.idField)) {
            var fetchChildren_1 = function (node) {
                return findChildren(getter(_this.parentIdField), _this.originalData || [], getter(_this.idField)(node));
            };
            this.treeView.hasChildren = function (node) {
                return fetchChildren_1(node).length > 0;
            };
            this.treeView.children = function (node) { return of(fetchChildren_1(node)); };
            this.treeView.editService = new FlatEditingService(this);
            this.treeView.filterChange.subscribe(this.handleFilterChange.bind(this));
            if (this.treeView.filter) {
                this.handleFilterChange(this.treeView.filter);
            }
        }
    };
    /**
     * @hidden
     */
    FlatDataBindingDirective.prototype.ngOnChanges = function (changes) {
        if (isChanged("parentIdField", changes, false)) {
            this.nodes = this.originalData;
        }
    };
    /**
     * @hidden
     */
    FlatDataBindingDirective.prototype.handleFilterChange = function (term) {
        if (!this.filterData) {
            return;
        }
        var filteredData = term
            ? filterTree(this.filterData, term, this.filterSettings, this.treeView.textField)
            : this.filterData;
        this.visibleNodes.clear();
        this.updateNodesVisibility(filteredData);
    };
    FlatDataBindingDirective.prototype.updateNodesVisibility = function (items) {
        var _this = this;
        items.forEach(function (wrapper) {
            _this.visibleNodes.add(wrapper.dataItem);
            if (wrapper.children) {
                _this.updateNodesVisibility(wrapper.children);
            }
        });
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], FlatDataBindingDirective.prototype, "nodes", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], FlatDataBindingDirective.prototype, "parentIdField", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], FlatDataBindingDirective.prototype, "idField", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Function])
    ], FlatDataBindingDirective.prototype, "isVisible", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], FlatDataBindingDirective.prototype, "filter", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], FlatDataBindingDirective.prototype, "filterSettings", null);
    FlatDataBindingDirective = tslib_1.__decorate([
        Directive({ selector: "[kendoTreeViewFlatDataBinding]" }),
        tslib_1.__metadata("design:paramtypes", [DataBoundComponent])
    ], FlatDataBindingDirective);
    return FlatDataBindingDirective;
}());
export { FlatDataBindingDirective };
export { ɵ0, ɵ1 };
