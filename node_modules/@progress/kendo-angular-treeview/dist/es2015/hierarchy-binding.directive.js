/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Directive, Input, Optional, Host } from '@angular/core';
import { getter } from '@progress/kendo-common';
import { DataBoundComponent } from './data-bound-component';
import { isArrayWithAtLeastOneItem, isPresent } from './utils';
import { of } from 'rxjs';
import { HierarchyEditingService } from './drag-and-drop/editing-services/hierarchy-editing.service';
import { filterTree } from './utils';
import { defaultTreeviewFilterSettings } from './treeview-filter-settings';
import { DragAndDropDirective } from './drag-and-drop/drag-and-drop.directive';
import { isVisible } from './default-callbacks';
const mapToWrappers = (currentLevelNodes, childrenField) => {
    if (!isArrayWithAtLeastOneItem(currentLevelNodes)) {
        return [];
    }
    return currentLevelNodes.map(node => ({
        dataItem: node,
        children: mapToWrappers(getter(childrenField)(node), childrenField)
    }));
};
const ɵ0 = mapToWrappers;
/**
 * A directive which encapsulates the retrieval of child nodes.
 */
let HierarchyBindingDirective = class HierarchyBindingDirective {
    constructor(treeView, dragAndDropDirective) {
        this.treeView = treeView;
        this.dragAndDropDirective = dragAndDropDirective;
        /**
         * Stores the unfiltered nodes
         */
        this.filterData = [];
        this.visibleNodes = new Set();
        this._filterSettings = defaultTreeviewFilterSettings;
        const shouldFilter = !isPresent(this.dragAndDropDirective);
        this.treeView.isVisible = shouldFilter ? (node) => this.visibleNodes.has(node) : isVisible;
    }
    /**
     * The field name which holds the data items of the child component.
     */
    set childrenField(value) {
        if (!value) {
            throw new Error("'childrenField' cannot be empty");
        }
        this._childrenField = value;
    }
    /**
     * The nodes which will be displayed by the TreeView.
     */
    set nodes(values) {
        this.filterData = mapToWrappers(values, this.childrenField) || [];
        this.visibleNodes.clear();
        this.updateNodesVisibility(this.filterData);
    }
    /**
     * @hidden
     * A callback which determines whether a TreeView node should be rendered as hidden.
     */
    set isVisible(fn) {
        this.treeView.isVisible = fn;
    }
    /**
     * Applies a filter and changes the visibility of the component's nodes accordingly.
     * To customize the built-in filtering, use the [filterSettings]({% slug api_treeview_hierarchybindingdirective %}#toc-filtersettings) prop.
     */
    set filter(term) {
        this.handleFilterChange(term);
    }
    /**
     * The settings which are applied when performing a filter on the component's data.
     */
    set filterSettings(value) {
        this._filterSettings = Object.assign({}, defaultTreeviewFilterSettings, value);
    }
    get filterSettings() {
        return this._filterSettings;
    }
    /**
     * The field name which holds the data items of the child component.
     */
    get childrenField() {
        return this._childrenField;
    }
    ngOnInit() {
        if (isPresent(this.childrenField)) {
            this.treeView.children = item => of(getter(this.childrenField)(item));
            this.treeView.hasChildren = item => {
                const children = getter(this.childrenField)(item);
                return Boolean(children && children.length);
            };
            this.treeView.editService = new HierarchyEditingService(this);
            this.treeView.filterChange.subscribe(this.handleFilterChange.bind(this));
            if (this.treeView.filter) {
                this.handleFilterChange(this.treeView.filter);
            }
        }
    }
    /**
     * @hidden
     */
    handleFilterChange(term) {
        if (!this.filterData) {
            return;
        }
        const filteredNodes = term ? filterTree(this.filterData, term, this.filterSettings, this.treeView.textField) : this.filterData;
        this.visibleNodes.clear();
        this.updateNodesVisibility(filteredNodes);
    }
    updateNodesVisibility(items) {
        items.forEach((wrapper) => {
            this.visibleNodes.add(wrapper.dataItem);
            if (wrapper.children) {
                this.updateNodesVisibility(wrapper.children);
            }
        });
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], HierarchyBindingDirective.prototype, "childrenField", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], HierarchyBindingDirective.prototype, "nodes", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Function])
], HierarchyBindingDirective.prototype, "isVisible", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], HierarchyBindingDirective.prototype, "filter", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], HierarchyBindingDirective.prototype, "filterSettings", null);
HierarchyBindingDirective = tslib_1.__decorate([
    Directive({ selector: '[kendoTreeViewHierarchyBinding]' }),
    tslib_1.__param(1, Optional()), tslib_1.__param(1, Host()),
    tslib_1.__metadata("design:paramtypes", [DataBoundComponent, DragAndDropDirective])
], HierarchyBindingDirective);
export { HierarchyBindingDirective };
export { ɵ0 };
