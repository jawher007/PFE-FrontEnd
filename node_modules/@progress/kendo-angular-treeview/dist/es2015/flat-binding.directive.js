/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Directive, Input } from '@angular/core';
import { isChanged } from '@progress/kendo-angular-common';
import { getter } from '@progress/kendo-common';
import { of } from 'rxjs';
import { compose } from './funcs';
import { DataBoundComponent } from './data-bound-component';
import { isBlank, isNullOrEmptyString, isPresent, isArrayWithAtLeastOneItem, filterTree } from './utils';
import { FlatEditingService } from "./drag-and-drop/editing-services/flat-editing.service";
import { defaultTreeviewFilterSettings } from './treeview-filter-settings';
const findChildren = (prop, nodes, value) => nodes.filter((x) => prop(x) === value);
const ɵ0 = findChildren;
const mapToTree = (currentLevelNodes, allNodes, parentIdField, idField) => {
    if (!isArrayWithAtLeastOneItem(currentLevelNodes)) {
        return [];
    }
    return currentLevelNodes.map((node) => ({
        dataItem: node,
        children: mapToTree(findChildren(getter(parentIdField), allNodes || [], getter(idField)(node)), allNodes, parentIdField, idField)
    }));
};
const ɵ1 = mapToTree;
/**
 * A directive which encapsulates the retrieval of the child nodes.
 */
let FlatDataBindingDirective = class FlatDataBindingDirective {
    constructor(treeView) {
        this.treeView = treeView;
        /**
         * @hidden
         */
        this.originalData = [];
        this.visibleNodes = new Set();
        this._filterSettings = defaultTreeviewFilterSettings;
        this.treeView.isVisible = (node) => this.visibleNodes.has(node);
    }
    /**
     * The nodes which will be displayed by the TreeView.
     */
    set nodes(values) {
        this.originalData = values || [];
        if (!isNullOrEmptyString(this.parentIdField)) {
            const prop = getter(this.parentIdField);
            this.treeView.nodes = this.originalData.filter(compose(isBlank, prop));
            this.filterData = mapToTree(this.treeView.nodes, this.originalData, this.parentIdField, this.idField);
            this.visibleNodes.clear();
            this.updateNodesVisibility(this.filterData);
        }
        else {
            this.treeView.nodes = this.originalData.slice(0);
        }
    }
    /**
     * @hidden
     * A callback which determines whether a TreeView node should be rendered as hidden.
     */
    set isVisible(fn) {
        this.treeView.isVisible = fn;
    }
    /**
     * Applies a filter and changes the visibility of the component's nodes accordingly.
     * To customize the built-in filtering, use the [filterSettings]({% slug api_treeview_flatdatabindingdirective %}#toc-filtersettings) prop.
     */
    set filter(term) {
        this.handleFilterChange(term);
    }
    /**
     * The settings which are applied when performing a filter on the component's data.
     */
    set filterSettings(value) {
        this._filterSettings = Object.assign({}, defaultTreeviewFilterSettings, value);
    }
    get filterSettings() {
        return this._filterSettings;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        if (isPresent(this.parentIdField) && isPresent(this.idField)) {
            const fetchChildren = (node) => findChildren(getter(this.parentIdField), this.originalData || [], getter(this.idField)(node));
            this.treeView.hasChildren = (node) => fetchChildren(node).length > 0;
            this.treeView.children = (node) => of(fetchChildren(node));
            this.treeView.editService = new FlatEditingService(this);
            this.treeView.filterChange.subscribe(this.handleFilterChange.bind(this));
            if (this.treeView.filter) {
                this.handleFilterChange(this.treeView.filter);
            }
        }
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        if (isChanged("parentIdField", changes, false)) {
            this.nodes = this.originalData;
        }
    }
    /**
     * @hidden
     */
    handleFilterChange(term) {
        if (!this.filterData) {
            return;
        }
        const filteredData = term
            ? filterTree(this.filterData, term, this.filterSettings, this.treeView.textField)
            : this.filterData;
        this.visibleNodes.clear();
        this.updateNodesVisibility(filteredData);
    }
    updateNodesVisibility(items) {
        items.forEach((wrapper) => {
            this.visibleNodes.add(wrapper.dataItem);
            if (wrapper.children) {
                this.updateNodesVisibility(wrapper.children);
            }
        });
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], FlatDataBindingDirective.prototype, "nodes", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FlatDataBindingDirective.prototype, "parentIdField", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FlatDataBindingDirective.prototype, "idField", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Function])
], FlatDataBindingDirective.prototype, "isVisible", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], FlatDataBindingDirective.prototype, "filter", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], FlatDataBindingDirective.prototype, "filterSettings", null);
FlatDataBindingDirective = tslib_1.__decorate([
    Directive({ selector: "[kendoTreeViewFlatDataBinding]" }),
    tslib_1.__metadata("design:paramtypes", [DataBoundComponent])
], FlatDataBindingDirective);
export { FlatDataBindingDirective };
export { ɵ0, ɵ1 };
