/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var pager_settings_1 = require("./pager-settings");
var pager_template_directive_1 = require("./pager-template.directive");
var utils_1 = require("../utils");
var pager_context_service_1 = require("./pager-context.service");
var rxjs_1 = require("rxjs");
var constants_1 = require("../constants");
/**
 * @hidden
 */
var PagerComponent = /** @class */ (function () {
    function PagerComponent(pagerContext, element, renderer) {
        var _this = this;
        this.pagerContext = pagerContext;
        this.element = element;
        this.renderer = renderer;
        this.total = 0;
        this.skip = 1;
        this.pageChange = new core_1.EventEmitter();
        this.pagerWrapClass = true;
        this.gridPagerClass = true;
        this.widgetClass = true;
        this.settings = pager_settings_1.normalize({});
        this.subscriptions = new rxjs_1.Subscription();
        this._templateContext = {};
        this.resizeHandler = function () {
            var element = _this.element.nativeElement;
            if (_this.template || !element) {
                return;
            }
            var width = element.offsetWidth;
            if (width < constants_1.RESPONSIVE_BREAKPOINT_MEDIUM) {
                _this.renderer.removeClass(element, 'k-pager-md');
                _this.renderer.addClass(element, 'k-pager-sm');
            }
            else if (width >= constants_1.RESPONSIVE_BREAKPOINT_MEDIUM && width < constants_1.RESPONSIVE_BREAKPOINT_LARGE) {
                _this.renderer.addClass(element, 'k-pager-md');
                _this.renderer.removeClass(element, 'k-pager-sm');
            }
            else {
                _this.clearResponsiveClasses();
            }
        };
    }
    Object.defineProperty(PagerComponent.prototype, "options", {
        set: function (value) {
            this.settings = pager_settings_1.normalize(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "totalPages", {
        get: function () {
            return Math.ceil((this.total || 0) / this.pageSize);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "currentPage", {
        get: function () {
            return Math.floor((this.skip || 0) / this.pageSize) + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagerComponent.prototype, "templateContext", {
        get: function () {
            var context = this._templateContext;
            context.totalPages = this.totalPages;
            context.total = this.total;
            context.skip = this.skip;
            context.pageSize = this.pageSize;
            context.currentPage = this.currentPage;
            return context;
        },
        enumerable: true,
        configurable: true
    });
    PagerComponent.prototype.ngOnInit = function () {
        this.subscriptions.add(this.pagerContext.pageChange.subscribe(this.changePage.bind(this)));
    };
    PagerComponent.prototype.ngOnChanges = function (changes) {
        if (utils_1.anyChanged(['pageSize', 'skip', 'total'], changes, false)) {
            this.pagerContext.notifyChanges({
                pageSize: this.pageSize,
                skip: this.skip,
                total: this.total
            });
        }
        if (changes.template) {
            changes.template.currentValue ? this.clearResponsiveClasses() : this.resizeHandler();
        }
        if (changes.options) {
            this.settings.responsive ? this.resizeHandler() : this.clearResponsiveClasses();
        }
    };
    PagerComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    };
    PagerComponent.prototype.changePage = function (event) {
        this.pageChange.emit(event);
    };
    PagerComponent.prototype.clearResponsiveClasses = function () {
        var element = this.element.nativeElement;
        this.renderer.removeClass(element, 'k-pager-sm');
        this.renderer.removeClass(element, 'k-pager-md');
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], PagerComponent.prototype, "total", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], PagerComponent.prototype, "skip", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], PagerComponent.prototype, "pageSize", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PagerComponent.prototype, "options", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", pager_template_directive_1.PagerTemplateDirective)
    ], PagerComponent.prototype, "template", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], PagerComponent.prototype, "pageChange", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('class.k-pager-wrap'),
        tslib_1.__metadata("design:type", Boolean)
    ], PagerComponent.prototype, "pagerWrapClass", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('class.k-grid-pager'),
        tslib_1.__metadata("design:type", Boolean)
    ], PagerComponent.prototype, "gridPagerClass", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('class.k-widget'),
        tslib_1.__metadata("design:type", Boolean)
    ], PagerComponent.prototype, "widgetClass", void 0);
    PagerComponent = tslib_1.__decorate([
        core_1.Component({
            selector: 'kendo-pager',
            template: "\n        <ng-container\n            *ngIf=\"template?.templateRef\"\n            [ngTemplateOutlet]=\"template.templateRef\"\n            [ngTemplateOutletContext]=\"templateContext\">\n        </ng-container>\n        <ng-container *ngIf=\"!template?.templateRef\">\n            <kendo-pager-prev-buttons *ngIf=\"settings.previousNext\"></kendo-pager-prev-buttons>\n            <kendo-pager-numeric-buttons\n                *ngIf=\"settings.type === 'numeric'\"\n                [buttonCount]=\"settings.buttonCount\">\n            </kendo-pager-numeric-buttons>\n            <kendo-pager-input *ngIf=\"settings.type === 'input'\"></kendo-pager-input>\n            <kendo-pager-next-buttons *ngIf=\"settings.previousNext\"></kendo-pager-next-buttons>\n            <kendo-pager-info *ngIf='settings.info'></kendo-pager-info>\n            <kendo-pager-page-sizes *ngIf=\"settings.pageSizes\" [pageSizes]=\"settings.pageSizes\"></kendo-pager-page-sizes>\n        </ng-container>\n        <kendo-resize-sensor *ngIf=\"settings.responsive\" (resize)=\"resizeHandler()\"></kendo-resize-sensor>\n  "
        }),
        tslib_1.__metadata("design:paramtypes", [pager_context_service_1.PagerContextService,
            core_1.ElementRef,
            core_1.Renderer2])
    ], PagerComponent);
    return PagerComponent;
}());
exports.PagerComponent = PagerComponent;
