/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, Input, EventEmitter, Output, HostBinding, ElementRef, Renderer2 } from '@angular/core';
import { normalize } from './pager-settings';
import { PagerTemplateDirective } from './pager-template.directive';
import { anyChanged } from '../utils';
import { PagerContextService } from './pager-context.service';
import { Subscription } from 'rxjs';
import { RESPONSIVE_BREAKPOINT_LARGE, RESPONSIVE_BREAKPOINT_MEDIUM } from '../constants';
/**
 * @hidden
 */
let PagerComponent = class PagerComponent {
    constructor(pagerContext, element, renderer) {
        this.pagerContext = pagerContext;
        this.element = element;
        this.renderer = renderer;
        this.total = 0;
        this.skip = 1;
        this.pageChange = new EventEmitter();
        this.pagerWrapClass = true;
        this.gridPagerClass = true;
        this.widgetClass = true;
        this.settings = normalize({});
        this.subscriptions = new Subscription();
        this._templateContext = {};
        this.resizeHandler = () => {
            const element = this.element.nativeElement;
            if (this.template || !element) {
                return;
            }
            const width = element.offsetWidth;
            if (width < RESPONSIVE_BREAKPOINT_MEDIUM) {
                this.renderer.removeClass(element, 'k-pager-md');
                this.renderer.addClass(element, 'k-pager-sm');
            }
            else if (width >= RESPONSIVE_BREAKPOINT_MEDIUM && width < RESPONSIVE_BREAKPOINT_LARGE) {
                this.renderer.addClass(element, 'k-pager-md');
                this.renderer.removeClass(element, 'k-pager-sm');
            }
            else {
                this.clearResponsiveClasses();
            }
        };
    }
    set options(value) {
        this.settings = normalize(value);
    }
    get totalPages() {
        return Math.ceil((this.total || 0) / this.pageSize);
    }
    get currentPage() {
        return Math.floor((this.skip || 0) / this.pageSize) + 1;
    }
    get templateContext() {
        const context = this._templateContext;
        context.totalPages = this.totalPages;
        context.total = this.total;
        context.skip = this.skip;
        context.pageSize = this.pageSize;
        context.currentPage = this.currentPage;
        return context;
    }
    ngOnInit() {
        this.subscriptions.add(this.pagerContext.pageChange.subscribe(this.changePage.bind(this)));
    }
    ngOnChanges(changes) {
        if (anyChanged(['pageSize', 'skip', 'total'], changes, false)) {
            this.pagerContext.notifyChanges({
                pageSize: this.pageSize,
                skip: this.skip,
                total: this.total
            });
        }
        if (changes.template) {
            changes.template.currentValue ? this.clearResponsiveClasses() : this.resizeHandler();
        }
        if (changes.options) {
            this.settings.responsive ? this.resizeHandler() : this.clearResponsiveClasses();
        }
    }
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    }
    changePage(event) {
        this.pageChange.emit(event);
    }
    clearResponsiveClasses() {
        const element = this.element.nativeElement;
        this.renderer.removeClass(element, 'k-pager-sm');
        this.renderer.removeClass(element, 'k-pager-md');
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], PagerComponent.prototype, "total", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], PagerComponent.prototype, "skip", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], PagerComponent.prototype, "pageSize", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PagerComponent.prototype, "options", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", PagerTemplateDirective)
], PagerComponent.prototype, "template", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], PagerComponent.prototype, "pageChange", void 0);
tslib_1.__decorate([
    HostBinding('class.k-pager-wrap'),
    tslib_1.__metadata("design:type", Boolean)
], PagerComponent.prototype, "pagerWrapClass", void 0);
tslib_1.__decorate([
    HostBinding('class.k-grid-pager'),
    tslib_1.__metadata("design:type", Boolean)
], PagerComponent.prototype, "gridPagerClass", void 0);
tslib_1.__decorate([
    HostBinding('class.k-widget'),
    tslib_1.__metadata("design:type", Boolean)
], PagerComponent.prototype, "widgetClass", void 0);
PagerComponent = tslib_1.__decorate([
    Component({
        selector: 'kendo-pager',
        template: `
        <ng-container
            *ngIf="template?.templateRef"
            [ngTemplateOutlet]="template.templateRef"
            [ngTemplateOutletContext]="templateContext">
        </ng-container>
        <ng-container *ngIf="!template?.templateRef">
            <kendo-pager-prev-buttons *ngIf="settings.previousNext"></kendo-pager-prev-buttons>
            <kendo-pager-numeric-buttons
                *ngIf="settings.type === 'numeric'"
                [buttonCount]="settings.buttonCount">
            </kendo-pager-numeric-buttons>
            <kendo-pager-input *ngIf="settings.type === 'input'"></kendo-pager-input>
            <kendo-pager-next-buttons *ngIf="settings.previousNext"></kendo-pager-next-buttons>
            <kendo-pager-info *ngIf='settings.info'></kendo-pager-info>
            <kendo-pager-page-sizes *ngIf="settings.pageSizes" [pageSizes]="settings.pageSizes"></kendo-pager-page-sizes>
        </ng-container>
        <kendo-resize-sensor *ngIf="settings.responsive" (resize)="resizeHandler()"></kendo-resize-sensor>
  `
    }),
    tslib_1.__metadata("design:paramtypes", [PagerContextService,
        ElementRef,
        Renderer2])
], PagerComponent);
export { PagerComponent };
